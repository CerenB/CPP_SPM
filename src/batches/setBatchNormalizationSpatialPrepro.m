% (C) Copyright 2019 CPP BIDS SPM-pipeline developers

function matlabbatch = setBatchNormalizationSpatialPrepro(matlabbatch, voxDim, opt)
  %
  % Short description of what the function does goes here.
  %
  % USAGE::
  %
  %   [argout1, argout2] = templateFunction(argin1, [argin2 == default,] [argin3])
  %
  % :param argin1: (dimension) obligatory argument. Lorem ipsum dolor sit amet,
  %                consectetur adipiscing elit. Ut congue nec est ac lacinia.
  % :type argin1: type
  % :param argin2: optional argument and its default value. And some of the
  %               options can be shown in litteral like ``this`` or ``that``.
  % :type argin2: string
  % :param argin3: Options chosen for the analysis. See ``checkOptions()``.
  %
  % :returns: - :argout1: (type) (dimension)
  %           - :argout2: (type) (dimension)
  %

  jobsToAdd = numel(matlabbatch) + 1;

  for iJob = jobsToAdd:(jobsToAdd + 4)

    % set the deformation field for all the images we are about to normalize
    deformationField = ...
        cfg_dep('Segment: Forward Deformations', ...
                substruct( ...
                          '.', 'val', '{}', {opt.orderBatches.segment}, ...
                          '.', 'val', '{}', {1}, ...
                          '.', 'val', '{}', {1}), ...
                substruct('.', 'fordef', '()', {':'}));

    % we set images to be resampled at the voxel size we had at acquisition
    matlabbatch = setBatchNormalize(matlabbatch, deformationField, voxDim);

  end

  printBatchName('normalise functional images');
  matlabbatch{jobsToAdd}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Coregister: Estimate: Coregistered Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.coregister}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct('.', 'cfiles'));

  % NORMALIZE STRUCTURAL
  printBatchName('normalise anatomical images');
  matlabbatch{jobsToAdd + 1}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: Bias Corrected (1)', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'channel', '()', {1}, ...
                        '.', 'biascorr', '()', {':'}));
  % size 3 allow to run RunQA / original voxel size at acquisition
  matlabbatch{jobsToAdd + 1}.spm.spatial.normalise.write.woptions.vox = [1 1 1];

  % NORMALIZE GREY MATTER
  printBatchName('normalise grey matter tissue probability map');
  matlabbatch{jobsToAdd + 2}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: c1 Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'tiss', '()', {1}, ...
                        '.', 'c', '()', {':'}));

  % NORMALIZE WHITE MATTER
  printBatchName('normalise white matter tissue probability map');
  matlabbatch{jobsToAdd + 3}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: c2 Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'tiss', '()', {2}, ...
                        '.', 'c', '()', {':'}));

  % NORMALIZE CSF MATTER
  printBatchName('normalise csf tissue probability map');
  matlabbatch{jobsToAdd + 4}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: c3 Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'tiss', '()', {3}, ...
                        '.', 'c', '()', {':'}));

end
